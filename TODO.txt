- When persisting a collection of instances without generated ids, how to handle references between them?
    - It can happen that JOPA will try to insert a referenced individual which has not yet set id, which
        results in assigning it a generated URI. E.g. foreach(inst -> {inst.generateUri(); em.persist(inst); })
        Check how JPA behaves in this situation
- Change properties values to be Objects and try to infer value type in the driver, so that e.g. boolean is not saved as a string
- Add support for plain URI as value of an object (or annotation) property, i.e. instead of object reference, have just URI of the individual
- Add support for EntityManager.getReference
- Add support for named native queries
- Use SLF4J for logging?
- Support for data property collections?
- Add a @Context annotation, which would specify that a field/entity should always be loaded from the specified context.
    This could be overwritten with a descriptor passed to EM
- How to enhance query results with transactional changes? Sesame
    - First check how SQL queries in JPA behave
- When an entity is removed, there should be some IC check that verifies it is not referenced from any other entity
- Revisit the way objects and clones are cached in UoW, CloneBuilder and RepositoryMap
    - There should be some unambiguous workflow
    - And how they are loaded, especially as attributes of other objects
- Add support for orphanRemoval attribute in object properties
- Add support for namespace definition - on class and package level
- Add support for Lobs and Blobs
- Modify OntoDriver API to support Fetch joins
- Do some research on how to implement class hierarchies in JOPA
- Define schema for persistence.xml for JOPA
- Research whether we could replace aspectj with cglib-generated proxies
- IC - SHACL
- When OWL2Java generates classes and they already exist, rewrite only the fields and getters and setters, keep any other code intact
    - CodeModel API does not support any such feature, it always removes files and replaces them with new ones
